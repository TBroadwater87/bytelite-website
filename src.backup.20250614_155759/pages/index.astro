---
/* WCAG 2.2 Checklist:
 * ‚úÖ Heading hierarchy (h1 -> h2 -> h3)
 * ‚úÖ Alt text on all images
 * ‚úÖ Sufficient color contrast
 * ‚úÖ Interactive elements properly labeled
 * ‚úÖ Animation respects prefers-reduced-motion
 */

import BaseLayout from '../layouts/BaseLayout.astro';
import ProofSection from '../components/ProofSection.astro';
import DemoWidget from '../components/DemoWidget.astro';

const title = 'ByteLite - Revolutionary Data Compression';
const description = 'Compress 1TB to 18 bytes. Patent-pending technology using recursive pairing and segmented dictionaries. Download the blueprint.';
---

<BaseLayout title={title} description={description}>
  <section class="hero">
    <div class="container">
      <div class="hero-content">
        <h1 class="hero-title animate-fadeIn">
          1TB ‚Üí 18 Bytes
        </h1>
        <p class="hero-subtitle animate-fadeIn" style="animation-delay: 0.2s">
          Revolutionary compression technology that transforms massive datasets into minimal footprints through recursive mathematical transformation.
        </p>
        <div class="hero-stats animate-fadeIn" style="animation-delay: 0.4s">
          <div class="stat">
            <span class="stat-value" data-target="99.999999">0</span>
            <span class="stat-unit">%</span>
            <span class="stat-label">Compression Ratio</span>
          </div>
          <div class="stat">
            <span class="stat-value" data-target="200">0</span>
            <span class="stat-unit">KB</span>
            <span class="stat-label">Engine Size</span>
          </div>
          <div class="stat">
            <span class="stat-value" data-target="13">0</span>
            <span class="stat-unit">bytes</span>
            <span class="stat-label">Minimum Output</span>
          </div>
        </div>
        <div class="hero-actions animate-fadeIn" style="animation-delay: 0.6s">
          <a href="/download" class="btn btn-primary">Download Blueprint</a>
          <a href="/technology" class="btn btn-secondary">How It Works</a>
        </div>
        <p class="patent-notice animate-fadeIn" style="animation-delay: 0.8s">
          Patent Pending ‚Ä¢ U.S. Application No. 63/807,027
        </p>
      </div>
    </div>
  </section>

  <section class="features">
    <div class="container">
      <h2>Beyond Traditional Compression</h2>
      <p class="section-intro">
        ByteLite doesn't just compress data‚Äîit fundamentally transforms how information is represented through recursive mathematical operations.
      </p>
      
      <div class="feature-grid">
        <div class="feature-card">
          <div class="feature-icon">üîÑ</div>
          <h3>Recursive Pairing</h3>
          <p>Uses bijective functions to recursively pair values, creating increasingly compressible patterns with each iteration.</p>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">üìö</div>
          <h3>Segmented Dictionaries</h3>
          <p>Six specialized dictionaries with 254 patterns each provide complete 64-bit coverage using only 12KB total storage.</p>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">‚ôæÔ∏è</div>
          <h3>Infinite Scalability</h3>
          <p>Compress any amount of data‚Äîfrom kilobytes to petabytes‚Äîdown to a minimal representation plus metadata.</p>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon">‚úì</div>
          <h3>Lossless Guarantee</h3>
          <p>Perfect bit-for-bit reconstruction through deterministic inverse transformations. Every bit preserved.</p>
        </div>
      </div>
    </div>
  </section>

  <section class="demo-section">
    <div class="container">
      <h2>Try It Yourself</h2>
      <p class="section-intro">
        Experience ByteLite compression in your browser. Upload any file up to 100KB and watch it compress in real-time.
      </p>
      <DemoWidget />
    </div>
  </section>

  <section class="comparison">
    <div class="container">
      <h2>ByteLite vs Traditional Compression</h2>
      <div class="comparison-table-wrapper">
        <table class="comparison-table">
          <thead>
            <tr>
              <th>Feature</th>
              <th>ByteLite</th>
              <th>ZIP/GZIP</th>
              <th>7-Zip</th>
              <th>bzip2</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1GB Text File</td>
              <td><strong>15 bytes</strong></td>
              <td>~100MB</td>
              <td>~80MB</td>
              <td>~90MB</td>
            </tr>
            <tr>
              <td>Compression Method</td>
              <td>Recursive Transformation</td>
              <td>LZ77 + Huffman</td>
              <td>LZMA</td>
              <td>Burrows-Wheeler</td>
            </tr>
            <tr>
              <td>Engine Size</td>
              <td><strong>200KB</strong></td>
              <td>~500KB</td>
              <td>~1MB</td>
              <td>~300KB</td>
            </tr>
            <tr>
              <td>Patent Status</td>
              <td>Pending (2025)</td>
              <td>Expired</td>
              <td>Open Source</td>
              <td>Open Source</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </section>

  <ProofSection />

  <section class="cta">
    <div class="container">
      <div class="cta-content">
        <h2>Ready to Transform Your Data Storage?</h2>
        <p>Join the compression revolution. Download the technical blueprint and see for yourself.</p>
        <a href="/download" class="btn btn-primary btn-large">Get Started Now</a>
      </div>
    </div>
  </section>

  <style>
    .hero {
      padding: var(--space-3xl) 0;
      text-align: center;
      background: linear-gradient(135deg, var(--color-surface) 0%, var(--color-background) 100%);
    }
    
    .hero-title {
      font-size: clamp(2.5rem, 8vw, 5rem);
      font-weight: 700;
      margin: 0 0 var(--space-lg);
      background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .hero-subtitle {
      font-size: var(--font-size-xl);
      color: var(--color-text-muted);
      max-width: 800px;
      margin: 0 auto var(--space-2xl);
    }
    
    .hero-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: var(--space-xl);
      max-width: 600px;
      margin: 0 auto var(--space-2xl);
    }
    
    .stat {
      text-align: center;
    }
    
    .stat-value {
      font-size: var(--font-size-4xl);
      font-weight: 700;
      color: var(--color-primary);
    }
    
    .stat-unit {
      font-size: var(--font-size-xl);
      color: var(--color-primary);
    }
    
    .stat-label {
      display: block;
      font-size: var(--font-size-sm);
      color: var(--color-text-muted);
      margin-top: var(--space-xs);
    }
    
    .hero-actions {
      display: flex;
      gap: var(--space-md);
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: var(--space-xl);
    }
    
    .patent-notice {
      font-size: var(--font-size-sm);
      color: var(--color-text-muted);
      font-style: italic;
    }
    
    .features {
      padding: var(--space-3xl) 0;
    }
    
    .section-intro {
      font-size: var(--font-size-lg);
      color: var(--color-text-muted);
      text-align: center;
      max-width: 800px;
      margin: 0 auto var(--space-2xl);
    }
    
    .feature-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: var(--space-xl);
    }
    
    .feature-card {
      background-color: var(--color-surface);
      padding: var(--space-xl);
      border-radius: 8px;
      text-align: center;
      transition: transform var(--transition-base), box-shadow var(--transition-base);
    }
    
    .feature-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .feature-icon {
      font-size: 3rem;
      margin-bottom: var(--space-md);
    }
    
    .feature-card h3 {
      font-size: var(--font-size-xl);
      margin-bottom: var(--space-sm);
    }
    
    .demo-section {
      padding: var(--space-3xl) 0;
      background-color: var(--color-surface);
    }
    
    .comparison {
      padding: var(--space-3xl) 0;
    }
    
    .comparison-table-wrapper {
      overflow-x: auto;
      margin: 0 calc(-1 * var(--space-md));
      padding: 0 var(--space-md);
    }
    
    .comparison-table {
      min-width: 600px;
    }
    
    .comparison-table strong {
      color: var(--color-primary);
    }
    
    .cta {
      padding: var(--space-3xl) 0;
      background-color: var(--color-surface);
      text-align: center;
    }
    
    .cta-content h2 {
      font-size: var(--font-size-3xl);
      margin-bottom: var(--space-md);
    }
    
    .cta-content p {
      font-size: var(--font-size-lg);
      color: var(--color-text-muted);
      margin-bottom: var(--space-xl);
    }
    
    .btn-large {
      font-size: var(--font-size-lg);
      padding: var(--space-md) var(--space-2xl);
    }
    
    @media (prefers-reduced-motion: reduce) {
      .animate-fadeIn {
        animation: none;
        opacity: 1;
      }
    }
  </style>

  <script>
    // Counter animation
    const counters = document.querySelectorAll('[data-target]');
    const speed = 2000; // 2 seconds
    
    const animateCounter = (counter: Element) => {
      const target = parseFloat(counter.getAttribute('data-target') || '0');
      const increment = target / (speed / 16); // 60fps
      let current = 0;
      
      const updateCounter = () => {
        current += increment;
        if (current < target) {
          counter.textContent = current.toFixed(current < 10 ? 1 : 0);
          requestAnimationFrame(updateCounter);
        } else {
          counter.textContent = target.toString();
        }
      };
      
      updateCounter();
    };
    
    // Intersection Observer for animation trigger
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animateCounter(entry.target);
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });
    
    counters.forEach(counter => observer.observe(counter));
  </script>
</BaseLayout>
