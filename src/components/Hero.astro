---
export interface Props {
  variant?: 'default' | 'banner' | 'minimal';
  showPatentBadge?: boolean;
  showStats?: boolean;
  showBackground?: boolean;
  title?: {
    from?: string;
    to?: string;
  };
  subtitle?: string;
  description?: string;
  primaryCTA?: {
    text: string;
    link: string;
  };
  secondaryCTA?: {
    text: string;
    link: string;
  };
  stats?: Array<{
    value: string;
    label: string;
  }>;
}

const {
  variant = 'default',
  showPatentBadge = true,
  showStats = true,
  showBackground = true,
  title = {
    from: '1GB',
    to: '11 Bytes'
  },
  subtitle = 'A New Paradigm in Information Theory',
  description = "ByteLite doesn't just compress data—it transforms it through recursive mathematical operations that achieve compression ratios previously thought impossible.",
  primaryCTA = {
    text: 'See Live Demo',
    link: '/demo'
  },
  secondaryCTA = {
    text: 'Subscribe for Updates',
    link: '/subscribe'
  },
  stats = [
    { value: '1GB → 11 bytes', label: 'enwik9 Benchmark' },
    { value: '1TB → ~20 bytes', label: 'Theoretical Maximum' },
    { value: '285 KB', label: 'Engine Size' }
  ]
} = Astro.props;
---

<section class={`hero ${variant}`}>
  {showBackground && (
    <div class="hero-background">
      <div class="grid-overlay"></div>
      <div class="gradient-overlay"></div>
      <div class="particles"></div>
    </div>
  )}
  <div class="hero-content">
    {showPatentBadge && (
      <div class="patent-badge">
        Patent Pending | US 63/807,027
      </div>
    )}
    
    {title && (
      <h1 class="hero-title">
        <span class="size-from">{title.from}</span>
        <span class="arrow">→</span>
        <span class="size-to">{title.to}</span>
      </h1>
    )}
    
    {subtitle && (
      <p class="hero-subtitle">
        {subtitle}
      </p>
    )}
    
    {description && (
      <p class="hero-description">
        {description}
      </p>
    )}
    
    {showStats && stats && (
      <div class="hero-stats">
        {stats.map(stat => (
          <div class="stat">
            <span class="stat-value">{stat.value}</span>
            <span class="stat-label">{stat.label}</span>
          </div>
        ))}
      </div>
    )}
    
    {(primaryCTA || secondaryCTA) && (
      <div class="hero-cta">
        {primaryCTA && <a href={primaryCTA.link} class="btn btn-primary">{primaryCTA.text}</a>}
        {secondaryCTA && <a href={secondaryCTA.link} class="btn btn-secondary">{secondaryCTA.text}</a>}
      </div>
    )}
  </div>
</section>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    background: #0A0E27;
    padding: 2rem;
    position: relative;
  }
  
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      linear-gradient(rgba(0, 212, 255, 0.03) 1px, transparent 1px),
      linear-gradient(90deg, rgba(0, 212, 255, 0.03) 1px, transparent 1px);
    background-size: 50px 50px;
    pointer-events: none;
  }
  
  .hero-content {
    max-width: 1200px;
    margin: 0 auto;
    text-align: center;
    position: relative;
    z-index: 1;
  }
  
  .patent-badge {
    display: inline-block;
    padding: 0.5rem 1.5rem;
    background: rgba(0, 212, 255, 0.1);
    border: 1px solid #00D4FF;
    border-radius: 100px;
    color: #00D4FF;
    font-size: 0.875rem;
    margin-bottom: 2rem;
    font-weight: 500;
    letter-spacing: 0.025em;
  }
  
  .hero-title {
    font-size: clamp(3rem, 8vw, 6rem);
    font-weight: 800;
    margin: 0 0 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }
  
  .size-from {
    color: #E0E0E0;
  }
  
  .arrow {
    color: #00D4FF;
    font-weight: 400;
  }
  
  .size-to {
    color: #FF006E;
    text-shadow: 0 0 30px rgba(255, 0, 110, 0.5);
  }
  
  .hero-subtitle {
    font-size: 1.5rem;
    color: #00D4FF;
    margin: 0 0 1.5rem;
    font-weight: 300;
    letter-spacing: 0.025em;
  }
  
  .hero-description {
    font-size: 1.125rem;
    color: rgba(224, 224, 224, 0.8);
    max-width: 600px;
    margin: 0 auto 3rem;
    line-height: 1.6;
  }
  
  .hero-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    max-width: 800px;
    margin: 0 auto 3rem;
  }
  
  .stat {
    text-align: center;
    padding: 1.5rem;
    background: rgba(6, 8, 19, 0.4);
    border: 1px solid rgba(0, 212, 255, 0.1);
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  
  .stat:hover {
    border-color: rgba(0, 212, 255, 0.3);
    background: rgba(6, 8, 19, 0.6);
    transform: translateY(-2px);
  }
  
  .stat-value {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: #00D4FF;
    margin-bottom: 0.5rem;
    font-family: 'JetBrains Mono', monospace;
  }
  
  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: rgba(224, 224, 224, 0.6);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .hero-cta {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .btn {
    padding: 1rem 2.5rem;
    border-radius: 6px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    display: inline-block;
  }
  
  .btn-primary {
    background: #00D4FF;
    color: #0A0E27;
  }
  
  .btn-primary:hover {
    background: #00B8E6;
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 212, 255, 0.3);
  }
  
  .btn-secondary {
    background: transparent;
    color: #E0E0E0;
    border: 1px solid rgba(224, 224, 224, 0.3);
  }
  
  .btn-secondary:hover {
    border-color: #FF006E;
    color: #FF006E;
    background: rgba(255, 0, 110, 0.05);
  }
  
  /* Background styles */
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
    z-index: 0;
  }

  .grid-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background-image: 
      linear-gradient(rgba(0, 212, 255, 0.03) 1px, transparent 1px),
      linear-gradient(90deg, rgba(0, 212, 255, 0.03) 1px, transparent 1px);
    background-size: 50px 50px;
    animation: grid-move 20s linear infinite;
  }

  @keyframes grid-move {
    0% { transform: translate(0, 0); }
    100% { transform: translate(50px, 50px); }
  }

  .gradient-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at 30% 50%, rgba(0, 212, 255, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 70% 50%, rgba(255, 0, 110, 0.15) 0%, transparent 50%);
  }

  .particles {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .particles::before,
  .particles::after {
    content: '';
    position: absolute;
    width: 4px;
    height: 4px;
    background: var(--color-primary);
    border-radius: 50%;
    box-shadow: 
      20px 80px 0 0 rgba(0, 212, 255, 0.4),
      100px 150px 0 0 rgba(0, 212, 255, 0.3),
      300px 350px 0 0 rgba(255, 0, 110, 0.3),
      450px 180px 0 0 rgba(0, 212, 255, 0.4),
      600px 280px 0 0 rgba(255, 0, 110, 0.3);
    animation: float 15s infinite ease-in-out;
  }

  .particles::after {
    animation-delay: 7.5s;
    left: 50%;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
  
  /* Banner variant */
  .hero.banner {
    min-height: auto;
    padding: 4rem 2rem;
    background: linear-gradient(135deg, #0A0E27 0%, #060813 100%);
  }
  
  .hero.banner .hero-title {
    font-size: clamp(2rem, 5vw, 3rem);
  }
  
  /* Minimal variant */
  .hero.minimal {
    min-height: auto;
    padding: 3rem 2rem;
    background: transparent;
  }
  
  .hero.minimal .hero-title {
    font-size: clamp(2rem, 5vw, 3rem);
  }
  
  .hero.minimal .hero-stats {
    display: none;
  }
</style>
