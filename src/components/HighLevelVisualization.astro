---
export interface Props {
  showAnimation?: boolean;
}

const { showAnimation = true } = Astro.props;
---

<div class="visualization-container">
  <div class="viz-header">
    <h2>ByteLite Compression Overview</h2>
    <p>Revolutionary compression through mathematical transformation</p>
  </div>

  <div class="compression-flow">
    <!-- Input Side -->
    <div class="flow-section input-section">
      <div class="data-block large">
        <div class="data-icon">üìÅ</div>
        <div class="data-label">Original Data</div>
        <div class="data-size">1 TB</div>
      </div>
    </div>

    <!-- Transformation Process -->
    <div class="flow-section process-section">
      <div class="process-box">
        <div class="process-layers">
          <div class="layer layer-1">
            <span class="layer-label">Data Input</span>
          </div>
          <div class="layer layer-2">
            <span class="layer-label">Recursive Transformation</span>
          </div>
          <div class="layer layer-3">
            <span class="layer-label">Mathematical Compression</span>
          </div>
          <div class="layer layer-4">
            <span class="layer-label">Convergence Point</span>
          </div>
        </div>
        <div class="process-center">
          <div class="core-animation"></div>
        </div>
      </div>
    </div>

    <!-- Output Side -->
    <div class="flow-section output-section">
      <div class="data-block small">
        <div class="data-icon">üíé</div>
        <div class="data-label">Compressed</div>
        <div class="data-size">18 Bytes</div>
      </div>
    </div>
  </div>

  <div class="viz-footer">
    <div class="stat-box">
      <span class="stat-label">Compression Ratio</span>
      <span class="stat-value">99.999999998%</span>
    </div>
    <div class="stat-box">
      <span class="stat-label">Process Type</span>
      <span class="stat-value">Lossless</span>
    </div>
    <div class="stat-box">
      <span class="stat-label">Patent Status</span>
      <span class="stat-value">Pending</span>
    </div>
  </div>

  <div class="security-notice">
    <p>
      <strong>Note:</strong> Technical implementation details are restricted due to dual-use applications in computational intelligence.
    </p>
  </div>
</div>

<style>
  .visualization-container {
    background: linear-gradient(135deg, rgba(10, 14, 39, 0.9) 0%, rgba(6, 8, 19, 0.9) 100%);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 16px;
    padding: 3rem;
    margin: 2rem auto;
    max-width: 1200px;
    position: relative;
    overflow: hidden;
  }

  .visualization-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 50%, rgba(0, 212, 255, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 50%, rgba(255, 0, 110, 0.1) 0%, transparent 50%);
    pointer-events: none;
  }

  .viz-header {
    text-align: center;
    margin-bottom: 3rem;
    position: relative;
    z-index: 1;
  }

  .viz-header h2 {
    font-size: 2rem;
    color: var(--color-primary);
    margin-bottom: 0.5rem;
  }

  .viz-header p {
    color: var(--color-text-dim);
    font-size: 1.125rem;
  }

  .compression-flow {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    gap: 2rem;
    align-items: center;
    margin-bottom: 3rem;
    position: relative;
    z-index: 1;
  }

  .flow-section {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .data-block {
    text-align: center;
    padding: 2rem;
    background: rgba(10, 14, 39, 0.8);
    border: 1px solid rgba(224, 224, 224, 0.2);
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .data-block.large {
    transform: scale(1.2);
  }

  .data-block.small {
    transform: scale(0.8);
  }

  .data-block:hover {
    transform: translateY(-5px) scale(var(--scale, 1));
    border-color: var(--color-primary);
    box-shadow: 0 10px 30px rgba(0, 212, 255, 0.2);
  }

  .data-block.large:hover {
    --scale: 1.2;
  }

  .data-block.small:hover {
    --scale: 0.8;
  }

  .data-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .data-label {
    font-size: 1rem;
    color: var(--color-text-dim);
    margin-bottom: 0.5rem;
  }

  .data-size {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
    font-family: 'JetBrains Mono', monospace;
  }

  .process-box {
    width: 100%;
    max-width: 400px;
    height: 300px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .process-layers {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    padding: 2rem 0;
  }

  .layer {
    background: rgba(0, 212, 255, 0.05);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    text-align: center;
    position: relative;
    animation: layerPulse 3s ease-in-out infinite;
    animation-delay: calc(var(--layer-index) * 0.5s);
  }

  .layer-1 { --layer-index: 0; }
  .layer-2 { --layer-index: 1; }
  .layer-3 { --layer-index: 2; }
  .layer-4 { --layer-index: 3; }

  @keyframes layerPulse {
    0%, 100% { 
      opacity: 0.3;
      transform: translateX(0);
    }
    50% { 
      opacity: 1;
      transform: translateX(10px);
    }
  }

  .layer-label {
    font-size: 0.875rem;
    color: var(--color-text-dim);
  }

  .process-center {
    position: relative;
    z-index: 2;
    text-align: center;
  }

  .core-animation {
    width: 100px;
    height: 100px;
    margin: 0 auto 1rem;
    background: radial-gradient(circle, var(--color-primary) 0%, transparent 70%);
    border-radius: 50%;
    position: relative;
    animation: coreRotate 10s linear infinite;
  }

  .core-animation::before,
  .core-animation::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    border: 2px solid rgba(0, 212, 255, 0.3);
    border-radius: 50%;
    animation: coreExpand 2s ease-in-out infinite;
  }

  .core-animation::after {
    animation-delay: 1s;
  }

  @keyframes coreRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes coreExpand {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.5);
      opacity: 0;
    }
  }

  .core-label {
    font-size: 0.875rem;
    color: var(--color-primary);
    font-weight: 600;
  }

  .viz-footer {
    display: flex;
    justify-content: space-around;
    gap: 2rem;
    margin-bottom: 2rem;
    position: relative;
    z-index: 1;
  }

  .stat-box {
    text-align: center;
    padding: 1.5rem;
    background: rgba(10, 14, 39, 0.6);
    border: 1px solid rgba(224, 224, 224, 0.1);
    border-radius: 8px;
    flex: 1;
  }

  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: var(--color-text-dim);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .stat-value {
    display: block;
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-primary);
    font-family: 'JetBrains Mono', monospace;
  }

  .security-notice {
    background: rgba(255, 0, 110, 0.05);
    border: 1px solid rgba(255, 0, 110, 0.2);
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
    position: relative;
    z-index: 1;
  }

  .security-notice p {
    color: var(--color-text-dim);
    font-size: 0.875rem;
    margin: 0;
  }

  @media (max-width: 768px) {
    .visualization-container {
      padding: 2rem 1rem;
    }

    .compression-flow {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .process-box {
      height: 250px;
    }

    .viz-footer {
      flex-direction: column;
    }
  }
</style>