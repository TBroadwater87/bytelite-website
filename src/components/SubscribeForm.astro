---
export interface Props {
  variant?: 'default' | 'compact' | 'hero';
  title?: string;
  description?: string;
}

const {
  variant = 'default',
  title = 'Stay Updated on Deep Kore Neural Recursion',
  description = 'Be the first to know when the ByteLite Application Demo is ready. Get exclusive updates on our revolutionary compression technology and its applications in computational intelligence.'
} = Astro.props;
---

<div class={`subscribe-form ${variant}`}>
  <div class="form-content">
    <h3>{title}</h3>
    <p>{description}</p>
    
    <form id="subscribeForm" class="email-form">
      <div class="form-group">
        <input 
          type="email" 
          id="email" 
          name="email" 
          placeholder="Enter your email address" 
          required 
          class="email-input"
        />
        <button type="submit" class="submit-btn">
          Subscribe for Updates
        </button>
      </div>
      
      <div class="form-options">
        <label class="checkbox-label">
          <input type="checkbox" name="notifyDemo" checked />
          <span>Notify me when ByteLite Application Demo is available</span>
        </label>
        <label class="checkbox-label">
          <input type="checkbox" name="notifyAGI" checked />
          <span>Updates on Deep Kore Neural Recursion & AGI developments</span>
        </label>
      </div>
      
      <p class="form-note">
        Due to the dual-use nature of our mathematics in achieving true computational intelligence (AGI), 
        technical details are currently restricted. Subscribe for authorized updates.
      </p>
    </form>
    
    <div id="subscribeMessage" class="message hidden"></div>
  </div>
</div>

<style>
  .subscribe-form {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.05) 0%, rgba(255, 0, 110, 0.05) 100%);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 16px;
    padding: 3rem;
    margin: 2rem 0;
  }

  .subscribe-form.compact {
    padding: 2rem;
  }

  .subscribe-form.hero {
    background: rgba(10, 14, 39, 0.8);
    border-color: rgba(0, 212, 255, 0.3);
    padding: 4rem;
  }

  .form-content {
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
  }

  .form-content h3 {
    font-size: 2rem;
    color: var(--color-primary);
    margin-bottom: 1rem;
  }

  .form-content p {
    color: var(--color-text-dim);
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .email-form {
    margin-top: 2rem;
  }

  .form-group {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .email-input {
    flex: 1;
    min-width: 250px;
    padding: 1rem 1.5rem;
    background: rgba(10, 14, 39, 0.6);
    border: 1px solid rgba(224, 224, 224, 0.2);
    border-radius: 8px;
    color: var(--color-text);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .email-input:focus {
    outline: none;
    border-color: var(--color-primary);
    background: rgba(10, 14, 39, 0.8);
  }

  .email-input::placeholder {
    color: rgba(224, 224, 224, 0.5);
  }

  .submit-btn {
    padding: 1rem 2rem;
    background: var(--color-primary);
    color: var(--color-bg-dark);
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .submit-btn:hover {
    background: #00B8E6;
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 212, 255, 0.3);
  }

  .form-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
    text-align: left;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-text-dim);
    font-size: 0.875rem;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--color-primary);
    cursor: pointer;
  }

  .form-note {
    font-size: 0.75rem;
    color: rgba(224, 224, 224, 0.6);
    font-style: italic;
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(255, 0, 110, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(255, 0, 110, 0.1);
  }

  .message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    font-weight: 500;
  }

  .message.success {
    background: rgba(0, 255, 0, 0.1);
    border: 1px solid rgba(0, 255, 0, 0.3);
    color: #00FF00;
  }

  .message.error {
    background: rgba(255, 0, 0, 0.1);
    border: 1px solid rgba(255, 0, 0, 0.3);
    color: #FF0000;
  }

  .hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .subscribe-form {
      padding: 2rem 1.5rem;
    }

    .form-content h3 {
      font-size: 1.5rem;
    }

    .form-group {
      flex-direction: column;
    }

    .email-input {
      min-width: 100%;
    }
  }
</style>

<script>
  const form = document.getElementById('subscribeForm') as HTMLFormElement;
  const messageDiv = document.getElementById('subscribeMessage') as HTMLDivElement;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const email = formData.get('email');
    const notifyDemo = formData.get('notifyDemo');
    const notifyAGI = formData.get('notifyAGI');
    
    // Show loading state
    messageDiv.textContent = 'Subscribing...';
    messageDiv.className = 'message';
    
    // Simulate API call (replace with actual endpoint)
    try {
      // In production, this would be an actual API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Success message
      messageDiv.textContent = 'Successfully subscribed! You\'ll be notified about ByteLite Application Demo and Deep Kore Neural Recursion updates.';
      messageDiv.className = 'message success';
      
      // Reset form
      form.reset();
      
      // Keep checkboxes checked
      const checkboxes = form.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(cb => (cb as HTMLInputElement).checked = true);
      
    } catch (error) {
      messageDiv.textContent = 'An error occurred. Please try again later.';
      messageDiv.className = 'message error';
    }
  });
</script>