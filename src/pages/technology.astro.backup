---
// Technology page with comprehensive technical information
import Layout from '../layouts/Layout.astro';
---

<Layout title="ByteLite Technology - Revolutionary Compression">
  <main class="technology-page">
    <!-- Hero Section -->
    <section class="hero">
      <div class="container">
        <h1>Revolutionary Technology</h1>
        <p>Dynamic Algorithmic Compression achieving theoretical limits through recursive hierarchical transformation</p>
      </div>
    </section>

    <!-- Core Innovation -->
    <section class="section">
      <div class="container">
        <h2>Core Innovation</h2>
        <div class="grid">
          <div class="card">
            <h3>Recursive Hierarchical Compression</h3>
            <p>ByteLite doesn't just compress data‚Äîit transforms it through infinite recursive cycles until reaching a theoretical minimum representation of 8 bytes plus metadata.</p>
          </div>
          <div class="card">
            <h3>Mathematical Foundation</h3>
            <p>Built on bijective pairing functions and Segmented Domain Dictionaries that together cover the entire 64-bit pattern space through deterministic operations.</p>
          </div>
          <div class="card">
            <h3>Information Theory Compliance</h3>
            <p>ByteLite operates within information theory by redistributing information across multiple dimensions: final value + round count + decompression path.</p>
          </div>
        </div>
      </div>
    </section>

    <!-- Compression Process -->
    <section class="section">
      <div class="container">
        <h2>Compression Process</h2>
        
        <div class="process-flow">
          <div class="process-step">
            <h4>Round 1: Aggregation</h4>
            <p>8-bit ‚Üí 16-bit bijective pairing</p>
            <small>Adjacent bytes paired using mathematical bijections</small>
          </div>
          <div class="process-arrow">‚Üí</div>
          <div class="process-step">
            <h4>Round 2: Expansion</h4>
            <p>16-bit ‚Üí 32-bit combination</p>
            <small>Pair combination continues recursively</small>
          </div>
          <div class="process-arrow">‚Üí</div>
          <div class="process-step">
            <h4>Round 3: Convergence</h4>
            <p>32-bit ‚Üí 64-bit finalization</p>
            <small>Final aggregation before dictionary encoding</small>
          </div>
          <div class="process-arrow">‚Üí</div>
          <div class="process-step">
            <h4>Round 0: SDD Encoding</h4>
            <p>64-bit ‚Üí 8-bit array</p>
            <small>Segmented Domain Dictionary pattern matching</small>
          </div>
        </div>

        <div class="recursive-loop">
          <h3>üîÑ Infinite Recursion</h3>
          <p>The 4-round cycle repeats infinitely until <strong>termination conditions</strong> are met:</p>
          <ul>
            <li>Single element remains in array, OR</li>
            <li>Total data size ‚â§ 8 bytes, OR</li>
            <li>Safety limit reached (configurable)</li>
          </ul>
          <p><strong>Result:</strong> Any data size converges to ‚â§8 bytes + metadata through mathematical determinism.</p>
        </div>
      </div>
    </section>

    <!-- SDD System -->
    <section class="section">
      <div class="container">
        <h2>Segmented Domain Dictionary (SDD) System</h2>
        
        <div class="grid">
          <div class="card">
            <h3>Six-Dictionary Architecture</h3>
            <ul>
              <li><strong>Dictionary 1:</strong> Even bit positions (0,2,4...62) - ~45% coverage</li>
              <li><strong>Dictionary 2:</strong> Odd bit positions (1,3,5...63) - ~45% coverage</li>
              <li><strong>Dictionary 3:</strong> 12-24 bits set patterns</li>
              <li><strong>Dictionary 4:</strong> 8-16 bits set patterns</li>
              <li><strong>Dictionary 5:</strong> 4-12 bits set patterns</li>
              <li><strong>Dictionary 6:</strong> 1-4 bits set + single-bit patterns</li>
            </ul>
          </div>
          <div class="card">
            <h3>Mathematical Coverage</h3>
            <p><strong>254 patterns per dictionary</strong> = 1,524 total patterns</p>
            <p><strong>Combined coverage:</strong> 75-90% of entire 2^64 bit range</p>
            <p><strong>Storage overhead:</strong> Only ~12KB for all dictionaries</p>
            <p><strong>Search optimization:</strong> Lookup Table (LUT) reduces search space by ~90%</p>
          </div>
        </div>

        <div class="sdd-example">
          <h4>SDD Encoding Process</h4>
          <div class="code-block">
For each 64-bit value:
1. Start with boundary marker [0]
2. For each dictionary (1-6):
   - Use LUT to find relevant entries
   - Search only entries affecting target bits
   - If pattern found: append index + apply AND NOT
   - Else append no-coverage marker (1)
3. Close with boundary marker [0]

Example result: [0, 37, 1, 245, 1, 1, 89, 0]
          </div>
        </div>
      </div>
    </section>

    <!-- Technical Specifications -->
    <section class="section">
      <div class="container">
        <h2>Technical Specifications</h2>
        
        <div class="grid">
          <div class="card">
            <h3>System Requirements</h3>
            <ul>
              <li><strong>Architecture:</strong> x64 (64-bit required)</li>
              <li><strong>Memory:</strong> 64MB RAM minimum</li>
              <li><strong>Storage:</strong> 10MB (program + dictionaries)</li>
              <li><strong>OS:</strong> Windows 7+, Linux 3.0+, macOS 10.9+</li>
            </ul>
          </div>
          <div class="card">
            <h3>Performance Characteristics</h3>
            <ul>
              <li><strong>Text files:</strong> 99.9%+ compression typical</li>
              <li><strong>Binary data:</strong> 95-99% compression achievable</li>
              <li><strong>Multimedia:</strong> 90-98% compression possible</li>
              <li><strong>Universal:</strong> Any file converges to ‚â§8 bytes</li>
            </ul>
          </div>
          <div class="card">
            <h3>File Format (.BLC)</h3>
            <div class="file-format">
              <code>[Extension] [Space] [Round Count] [Compressed Data]</code>
            </div>
            <ul>
              <li>Original extension preserved</li>
              <li>Round count uses continuation bytes</li>
              <li>Perfect reconstruction guaranteed</li>
            </ul>
          </div>
        </div>
      </div>
    </section>

    <!-- Information Theory -->
    <section class="section">
      <div class="container">
        <h2>Information Theory Compliance</h2>
        
        <div class="info-theory-warning">
          <h3>‚ö†Ô∏è Physics Compliance</h3>
          <p>ByteLite operates within established information theory principles. Total information is preserved across: <strong>final value + round count + decompression path + file extension</strong>. The apparent "infinite compression" results from hierarchical information organization, not violation of physical laws.</p>
        </div>

        <div class="grid">
          <div class="card">
            <h3>Information Distribution</h3>
            <ul>
              <li><strong>Final Value:</strong> ‚â§8 bytes compressed data</li>
              <li><strong>Round Count:</strong> Unbounded integer (scales with complexity)</li>
              <li><strong>Decompression Path:</strong> Algorithm selection metadata</li>
              <li><strong>File Context:</strong> Original extension and type</li>
            </ul>
          </div>
          <div class="card">
            <h3>Hierarchical Storage</h3>
            <p>Like a library catalog system:</p>
            <ul>
              <li><strong>Level 1:</strong> Direct file compression</li>
              <li><strong>Level 2:</strong> Archive of compressed files</li>
              <li><strong>Level 3:</strong> Archive of archives</li>
              <li><strong>Level N:</strong> Infinite hierarchical depth</li>
            </ul>
          </div>
        </div>
      </div>
    </section>

    <!-- Performance Metrics -->
    <section class="section">
      <div class="container">
        <h2>Performance Metrics</h2>
        
        <div class="metrics">
          <div class="metric">
            <div class="metric-value">99.999%+</div>
            <div class="metric-label">Compression Ratio</div>
          </div>
          <div class="metric">
            <div class="metric-value">200KB</div>
            <div class="metric-label">Engine Size</div>
          </div>
          <div class="metric">
            <div class="metric-value">Lossless</div>
            <div class="metric-label">Perfect Reconstruction</div>
          </div>
          <div class="metric">
            <div class="metric-value">Universal</div>
            <div class="metric-label">Any Data Type</div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  /* Add comprehensive styling for technology page */
  .technology-page {
    background: linear-gradient(135deg, #060813 0%, #0A0E27 100%);
    color: white;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  .hero {
    text-align: center;
    padding: 4rem 0;
  }
  
  .hero h1 {
    font-size: 3.5rem;
    background: linear-gradient(45deg, #00D4FF, #FF006E);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1rem;
  }
  
  .section {
    padding: 4rem 0;
  }
  
  .section h2 {
    font-size: 2.5rem;
    text-align: center;
    color: #00D4FF;
    margin-bottom: 3rem;
  }
  
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
  }
  
  .card {
    background: rgba(16, 20, 43, 0.8);
    border: 1px solid #1a1f3a;
    border-radius: 12px;
    padding: 2rem;
    backdrop-filter: blur(10px);
  }
  
  .process-flow {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 2rem 0;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .process-step {
    background: linear-gradient(135deg, #1a1f3a, #0f1629);
    border: 2px solid #00D4FF;
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    flex: 1;
    min-width: 200px;
  }
  
  .process-arrow {
    font-size: 2rem;
    color: #FF006E;
    font-weight: bold;
  }
  
  .recursive-loop {
    border: 2px dashed #FF006E;
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    background: rgba(255, 0, 110, 0.1);
  }
  
  .code-block {
    background: #0f1629;
    border: 1px solid #1a1f3a;
    border-radius: 8px;
    padding: 1rem;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.9rem;
    white-space: pre-line;
  }
  
  .metrics {
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin: 3rem 0;
    flex-wrap: wrap;
    gap: 2rem;
  }
  
  .metric {
    text-align: center;
  }
  
  .metric-value {
    font-size: 3rem;
    font-weight: bold;
    background: linear-gradient(45deg, #00D4FF, #FF006E);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .metric-label {
    font-size: 1.1rem;
    color: #94A3B8;
    margin-top: 0.5rem;
  }
  
  .info-theory-warning {
    background: rgba(255, 0, 110, 0.2);
    border-left: 4px solid #FF006E;
    padding: 2rem;
    border-radius: 8px;
    margin: 2rem 0;
  }
  
  @media (max-width: 768px) {
    .process-flow {
      flex-direction: column;
    }
    .process-arrow {
      transform: rotate(90deg);
    }
  }
</style>
